"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.askForFakeEvent = exports.askEventToSimulate = exports.askEnvironment = exports.askTokenReplacement = exports.askToken = exports.askExtractionOverride = exports.askExampleSelection = void 0;
var inquirer_1 = __importDefault(require("inquirer"));
var helpers_1 = require("./helpers");
var logger_1 = require("./logger");
var askExampleSelection = function (examples) {
    return inquirer_1["default"].prompt([
        {
            type: 'list',
            name: 'example',
            message: 'Which base template would you like to use?',
            choices: examples.map(function (example) { return example === null || example === void 0 ? void 0 : example.name; })
        },
    ]);
};
exports.askExampleSelection = askExampleSelection;
var askExtractionOverride = function (folder) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, inquirer_1["default"].prompt([
                {
                    name: 'continue',
                    type: 'confirm',
                    message: "The folder " + folder + " already exists, do you want to replace it ?",
                    "default": false
                },
            ])];
    });
}); };
exports.askExtractionOverride = askExtractionOverride;
var askToken = function () {
    return inquirer_1["default"].prompt([
        {
            name: 'token',
            type: 'input',
            message: 'You need to provide an API token'
        },
    ]);
};
exports.askToken = askToken;
var askTokenReplacement = function () {
    return inquirer_1["default"].prompt([
        {
            name: 'replace',
            type: 'confirm',
            message: 'You already have a token configured, do you want to replace it?',
            "default": false
        },
    ]);
};
exports.askTokenReplacement = askTokenReplacement;
var askEnvironment = function (message) {
    return inquirer_1["default"].prompt([
        {
            type: 'list',
            name: 'environment',
            message: message,
            choices: helpers_1.ENVIRONMENTS
        },
    ]);
};
exports.askEnvironment = askEnvironment;
var askEventToSimulate = function (rules) {
    return inquirer_1["default"].prompt([
        {
            type: 'list',
            message: 'Select rule to simulate',
            name: 'rule',
            choices: rules
        },
    ]);
};
exports.askEventToSimulate = askEventToSimulate;
var askForFakeEvent = function () {
    return inquirer_1["default"].prompt([
        {
            type: 'editor',
            name: 'fake',
            message: 'Add a fake event to trigger!',
            validate: function (event) {
                try {
                    JSON.parse(event);
                }
                catch (err) {
                    (0, logger_1.log)((0, logger_1.error)('error while parsing event'));
                }
                return true;
            }
        },
    ]);
};
exports.askForFakeEvent = askForFakeEvent;
