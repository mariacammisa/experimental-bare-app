"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
/* eslint-disable import/no-extraneous-dependencies */
var nock_1 = __importDefault(require("nock"));
/* eslint-enable import/no-extraneous-dependencies */
var api_1 = __importDefault(require("../api"));
describe('SecurityScorecardAPI', function () {
    describe('constants', function () {
        test('DEFAULT_TIMEOUT_MS', function () {
            expect(api_1["default"].DEFAULT_TIMEOUT_MS).toEqual(60000);
        });
        test('DEFAULT_MAX_RETRIES', function () {
            expect(api_1["default"].DEFAULT_MAX_RETRIES).toEqual(0);
        });
        test('DEFAULT_HOST', function () {
            expect(api_1["default"].DEFAULT_HOST).toEqual('https://platform-api.securityscorecard.io');
        });
    });
    describe('intialize', function () {
        it('should set default config', function () {
            var securityScorecardAPI = new api_1["default"]('random_token');
            var defaultConfig = {
                host: 'https://platform-api.securityscorecard.io',
                maxRetries: 0,
                timeout: 60000
            };
            expect(securityScorecardAPI.config).toEqual(__assign({ token: 'random_token' }, defaultConfig));
        });
        test('override baseUrl', function () {
            var securityScorecardAPI = new api_1["default"]('random_token', {
                host: 'https://local.securityscorecard.io'
            });
            var defaultConfig = {
                host: 'https://platform-api.securityscorecard.io',
                maxRetries: 0,
                timeout: 60000
            };
            expect(securityScorecardAPI.config).toEqual(__assign(__assign({}, defaultConfig), { token: 'random_token', host: 'https://local.securityscorecard.io' }));
        });
        test('override timeout', function () {
            var securityScorecardAPI = new api_1["default"]('random_token', {
                timeout: 10000
            });
            var defaultConfig = {
                host: 'https://platform-api.securityscorecard.io',
                maxRetries: 0,
                timeout: 60000
            };
            expect(securityScorecardAPI.config).toEqual(__assign(__assign({}, defaultConfig), { token: 'random_token', timeout: 10000 }));
        });
        test('override maxRetries', function () {
            var securityScorecardAPI = new api_1["default"]('random_token', {
                maxRetries: 10
            });
            var defaultConfig = {
                host: 'https://platform-api.securityscorecard.io',
                maxRetries: 0,
                timeout: 60000
            };
            expect(securityScorecardAPI.config).toEqual(__assign(__assign({}, defaultConfig), { token: 'random_token', maxRetries: 10 }));
        });
    });
    describe('apiCall', function () {
        test('call any endpoint with authorization', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mockServerUrl, testToken, sscApi, scope, resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mockServerUrl = 'https://mock-api.securityscorecard.io';
                        testToken = 'TEST_TOKEN';
                        sscApi = new api_1["default"](testToken, {
                            host: mockServerUrl
                        });
                        if (!nock_1["default"].isActive())
                            nock_1["default"].activate();
                        nock_1["default"].disableNetConnect();
                        scope = (0, nock_1["default"])(mockServerUrl, {
                            reqheaders: {
                                Authorization: "Token " + testToken
                            }
                        })
                            .get('/portfolios')
                            .reply(200, { ok: 'ok' });
                        return [4 /*yield*/, sscApi.apiCall('/portfolios')];
                    case 1:
                        resp = _a.sent();
                        expect(resp).toEqual({ ok: 'ok' });
                        scope.done();
                        return [2 /*return*/];
                }
            });
        }); });
        test('call any endpoint without authorization', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mockServerUrl, testToken, sscApi, scope, resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mockServerUrl = 'https://mock-api.securityscorecard.io';
                        testToken = 'TEST_TOKEN';
                        sscApi = new api_1["default"](testToken, {
                            host: mockServerUrl
                        });
                        if (!nock_1["default"].isActive())
                            nock_1["default"].activate();
                        nock_1["default"].disableNetConnect();
                        scope = (0, nock_1["default"])(mockServerUrl, {
                            badheaders: ['Authorization']
                        })
                            .get('/portfolios')
                            .reply(200, { ok: 'ok' });
                        return [4 /*yield*/, sscApi.apiCall('/portfolios', {
                                authorize: false
                            })];
                    case 1:
                        resp = _a.sent();
                        expect(resp).toEqual({ ok: 'ok' });
                        scope.done();
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=api.spec.js.map