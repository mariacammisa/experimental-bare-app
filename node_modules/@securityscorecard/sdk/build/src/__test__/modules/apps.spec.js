"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var R = __importStar(require("rambda"));
// eslint-disable-next-line import/no-extraneous-dependencies
var api_1 = __importDefault(require("../../api"));
var apps_1 = __importDefault(require("../../modules/apps"));
var nockHelper = __importStar(require("../helpers/nock"));
var mockInstallAppSuccessResponse = function (attrs) { return (__assign({ id: 'e7b4efb6-4fe5-4f69-8873-d88abb944ac9', url: 'https://sample-app.app/public/manifest.json', created_by: 'someone@securityscorecard.io', created_at: new Date().toISOString(), name: 'Experimental Toretto App', namespace: '', logo_url: 'https://sample-app.app/apps/e7b4efb6-4fe5-4f69-8873-d88abb944ac9/logo.png', description: 'Fast & Safe', long_description: 'Toretto is a tiny and fast app only for experimental purposes only', tags: [], homepage: 'https://sample-app.app', developer: 'someone.com', installed_at: new Date().toISOString(), configuration_complete: true }, attrs)); };
var mockValidateManifestSuccessResponse = function () { return ({
    success: true,
    message: 'Validation Success'
}); };
var mockValidateManifestFailedResponse = function () { return ({
    success: false,
    message: 'Error: invalid namespace: "312312 invalid manifest"'
}); };
afterAll(function () {
    nockHelper.stop();
});
afterEach(function () {
    nockHelper.stop();
});
describe('modules -> apps', function () {
    describe('install', function () {
        test('successfully install new app', function () { return __awaiter(void 0, void 0, void 0, function () {
            var token, appInfo, api, scope, appsModule, app;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = 'test_4gxJxaiA1uBqOIAoIarFGV';
                        appInfo = {
                            url: 'https://toretto-cristiandley.vercel.app/manifest.json',
                            id: '00000-4fe5-4f69-8873-d88abb944ac9',
                            name: 'Sample App'
                        };
                        api = new api_1["default"](token, {
                            host: nockHelper.MOCK_SERVER_URL
                        });
                        scope = nockHelper.listenMockServer({
                            options: { reqheaders: { Authorization: "Token " + token } }
                        });
                        scope
                            .post('/apps', {
                            url: 'https://toretto-cristiandley.vercel.app/manifest.json'
                        })
                            .reply(200, mockInstallAppSuccessResponse(appInfo));
                        appsModule = (0, apps_1["default"])(api);
                        return [4 /*yield*/, appsModule.install({
                                url: 'https://toretto-cristiandley.vercel.app/manifest.json'
                            })];
                    case 1:
                        app = _a.sent();
                        expect(app).toMatchObject(appInfo);
                        expect(scope.isDone()).toEqual(true);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('validate', function () {
        test('successfully validate app manifest', function () { return __awaiter(void 0, void 0, void 0, function () {
            var token, validationInfo, api, scope, appsModule, app;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = 'test_4gxJxaiA1uBqOIAoIarFGV';
                        validationInfo = {
                            success: true,
                            message: 'Validation Success'
                        };
                        api = new api_1["default"](token, {
                            host: nockHelper.MOCK_SERVER_URL
                        });
                        scope = nockHelper.listenMockServer({
                            options: { reqheaders: { Authorization: "Token " + token } }
                        });
                        scope
                            .post('/apps/validate-manifest', {
                            url: 'https://toretto-cristiandley.vercel.app/manifest.json'
                        })
                            .reply(200, mockValidateManifestSuccessResponse());
                        appsModule = (0, apps_1["default"])(api);
                        return [4 /*yield*/, appsModule.validate({
                                url: 'https://toretto-cristiandley.vercel.app/manifest.json'
                            })];
                    case 1:
                        app = _a.sent();
                        expect(app).toMatchObject(validationInfo);
                        expect(scope.isDone()).toEqual(true);
                        return [2 /*return*/];
                }
            });
        }); });
        test('failed validate app manifest', function () { return __awaiter(void 0, void 0, void 0, function () {
            var token, validationInfo, api, scope, appsModule, app;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = 'test_4gxJxaiA1uBqOIAoIarFGV';
                        validationInfo = {
                            success: false,
                            message: 'Error: invalid namespace: "312312 invalid manifest"'
                        };
                        api = new api_1["default"](token, {
                            host: nockHelper.MOCK_SERVER_URL
                        });
                        scope = nockHelper.listenMockServer({
                            options: { reqheaders: { Authorization: "Token " + token } }
                        });
                        scope
                            .post('/apps/validate-manifest', {
                            url: 'https://toretto-cristiandley.vercel.app/manifest.json'
                        })
                            .reply(200, mockValidateManifestFailedResponse());
                        appsModule = (0, apps_1["default"])(api);
                        return [4 /*yield*/, appsModule.validate({
                                url: 'https://toretto-cristiandley.vercel.app/manifest.json'
                            })];
                    case 1:
                        app = _a.sent();
                        expect(app).toMatchObject(validationInfo);
                        expect(scope.isDone()).toEqual(true);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('sendSignals', function () {
        test('send signal', function () { return __awaiter(void 0, void 0, void 0, function () {
            var token, signalType, mockResponse, signals, api, scope, compareBody, appsModule, signalsResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = 'test_LfWMPT5ElimrEH9OuOdPAFh';
                        signalType = 'experimental_signal_app.leaked_information';
                        mockResponse = [
                            { id: '5666d460-e1b0-5415-ad95-ee26ac8c82af' },
                            { id: '4923463a-326e-5525-979c-5b6a29464926' },
                        ];
                        signals = [
                            {
                                domain: 'securityscorecard.com',
                                summary: 'See this signal',
                                lastSeen: new Date().toISOString()
                            },
                            {
                                domain: 'example.com',
                                summary: 'See this signal',
                                lastSeen: new Date().toISOString()
                            },
                        ];
                        api = new api_1["default"](token, {
                            host: nockHelper.MOCK_SERVER_URL
                        });
                        scope = nockHelper.listenMockServer({
                            options: { reqheaders: { Authorization: "Token " + token } }
                        });
                        compareBody = function (body) {
                            return R.equals(body, [
                                {
                                    op: 'add',
                                    value: {
                                        domain: 'securityscorecard.com',
                                        summary: 'See this signal',
                                        last_seen: signals[0].lastSeen
                                    }
                                },
                                {
                                    op: 'add',
                                    value: {
                                        domain: 'example.com',
                                        summary: 'See this signal',
                                        last_seen: signals[1].lastSeen
                                    }
                                },
                            ]);
                        };
                        scope.patch("/signals/by-type/" + signalType, compareBody).reply(200, mockResponse);
                        appsModule = (0, apps_1["default"])(api);
                        return [4 /*yield*/, appsModule.sendSignals('experimental_signal_app.leaked_information', signals)];
                    case 1:
                        signalsResult = _a.sent();
                        expect(signalsResult).toEqual([
                            { id: '5666d460-e1b0-5415-ad95-ee26ac8c82af' },
                            { id: '4923463a-326e-5525-979c-5b6a29464926' },
                        ]);
                        expect(scope.isDone()).toEqual(true);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('updateInstallationData', function () {
        test('successfully complete install', function () { return __awaiter(void 0, void 0, void 0, function () {
            var token, installationData, api, apps, scope, installationResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = 'test_LfWMPT5ElimrEH9OuOdPAFh';
                        installationData = {
                            installation: 'some_installation_token',
                            secrets: [
                                { key: 'app_secret', value: 'shhh' },
                                { key: 'external_token', value: 'token_value' },
                            ]
                        };
                        api = new api_1["default"](token, {
                            host: nockHelper.MOCK_SERVER_URL
                        });
                        apps = (0, apps_1["default"])(api);
                        scope = nockHelper
                            .listenMockServer()
                            .post('/apps/installation-data', installationData)
                            .reply(200, { next_url: 'some_url' });
                        return [4 /*yield*/, apps.updateInstallationData(installationData)];
                    case 1:
                        installationResponse = _a.sent();
                        expect(installationResponse).toEqual({ next_url: 'some_url' });
                        expect(scope.isDone()).toEqual(true);
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=apps.spec.js.map