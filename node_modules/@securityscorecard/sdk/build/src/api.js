"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var superagent_1 = __importDefault(require("superagent"));
var errors_1 = require("./errors");
var utils_1 = require("./utils");
var types_1 = require("./types");
var SecurityScorecardAPI = /** @class */ (function () {
    function SecurityScorecardAPI(token, options) {
        if (!token)
            throw new Error('token cannot be empty');
        this.config = {
            token: token,
            timeout: (options === null || options === void 0 ? void 0 : options.timeout) || SecurityScorecardAPI.DEFAULT_TIMEOUT_MS,
            maxRetries: (options === null || options === void 0 ? void 0 : options.maxRetries) || SecurityScorecardAPI.DEFAULT_MAX_RETRIES,
            host: (options === null || options === void 0 ? void 0 : options.host) || SecurityScorecardAPI.DEFAULT_HOST
        };
    }
    SecurityScorecardAPI.prototype.apiCall = function (path, options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var timeout, maxRetries, method, host, authorize, headers, url, req, res, error_1, message;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        timeout = (options === null || options === void 0 ? void 0 : options.timeout) || this.config.timeout;
                        maxRetries = (options === null || options === void 0 ? void 0 : options.maxRetries) || this.config.maxRetries;
                        method = (options === null || options === void 0 ? void 0 : options.method) || types_1.HTTPMethod.GET;
                        host = this.config.host;
                        authorize = (_a = options === null || options === void 0 ? void 0 : options.authorize) !== null && _a !== void 0 ? _a : true;
                        headers = {};
                        if (authorize) {
                            headers.Authorization = "Token " + this.config.token;
                        }
                        url = (0, utils_1.normalizeUrl)(host.concat(path));
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        req = (0, superagent_1["default"])(method, url).timeout(timeout).retry(maxRetries).set(headers);
                        if (options === null || options === void 0 ? void 0 : options.query) {
                            req.query(options.query);
                        }
                        if (options === null || options === void 0 ? void 0 : options.body) {
                            req.send(options.body);
                        }
                        return [4 /*yield*/, req];
                    case 2:
                        res = _b.sent();
                        return [2 /*return*/, res.status === 204 ? undefined : res.body];
                    case 3:
                        error_1 = _b.sent();
                        message = "there was an error when trying to call [" + method.toUpperCase() + "] - " + path;
                        throw new errors_1.SSCApiError(message, [error_1]);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Default timeout in milliseconds 6000ms equivalent to 1 minute
     */
    SecurityScorecardAPI.DEFAULT_TIMEOUT_MS = 6e4;
    /**
     * Default number of retries, by default this value is set to 0.
     * Retries can only be used with requests that are idempotent.
     */
    SecurityScorecardAPI.DEFAULT_MAX_RETRIES = 0;
    /**
     * By default the sdk will use production 'https://platform-api.securityscorecard.io'
     */
    SecurityScorecardAPI.DEFAULT_HOST = 'https://platform-api.securityscorecard.io';
    return SecurityScorecardAPI;
}());
exports["default"] = SecurityScorecardAPI;
//# sourceMappingURL=api.js.map